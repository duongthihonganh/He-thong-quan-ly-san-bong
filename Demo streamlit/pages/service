import streamlit as st
import pandas as pd
import data

def web():
    st.title("Service Management")
    
    # Check authentication
    if not st.session_state.get('authenticated', False):
        st.warning("Please login to access this page.")
        st.stop()

    st.header("Services List")
        
    # Display services in a table
    if st.session_state.services:
        df = pd.DataFrame(st.session_state.services)
        # Reorder and rename columns for display
        display_df = df[['id', 'name', 'description', 'price']].copy()            
        display_df.columns = ['ID', 'Name', 'Description', 'Price']
        # Format prices as VND
        display_df['Price'] = display_df['Price'].apply(data.format_vnd)            
        st.dataframe(display_df, use_container_width=True)    
    else:
            st.info("No services available. Please add a service.")

# ---------------- CREATE SERVICES FORM ----------------
    with st.expander("Thêm dịch vụ mới", expanded=False):
        st.header("Thêm dịch vụ mới")
        
        with st.form("add_service_form"):
            name = st.text_input("Service Name")
            description = st.text_area("Description")
            price = st.number_input("Price (VND)", min_value=0.0, step=10000.0, format="%.0f")
            
            submitted = st.form_submit_button("Add Service")
            
            if submitted:
                if name and price >= 0:
                    service_id = data.add_service(name, description, price)
                    if service_id:
                        st.success(f"Service '{name}' added successfully!")
                        st.rerun()
                    else:
                        st.error("Failed to add service.")
                else:
                    st.error("Please fill in all required fields.")

    # Select a service to edit or delete
    selected_service_id = st.selectbox(
        "Select a service to edit or delete",
        options=[service["id"] for service in st.session_state.services],
        format_func=lambda x: next((s["name"] for s in st.session_state.services if s["id"] == x), x)
        )
            
    if selected_service_id:
            service = next((s for s in st.session_state.services if s["id"] == selected_service_id), None)
            if service:
                with st.expander("Edit Service"):
                    with st.form("edit_service_form"):
                        name = st.text_input("Service Name", value=service["name"])
                        description = st.text_area("Description", value=service["description"])                            
                        price = st.number_input("Price (VND)", min_value=0.0, value=float(service["price"]), step=10000.0, format="%.0f")
                            
                        col1, col2 = st.columns(2)
                        with col1:
                            submit = st.form_submit_button("Update Service")
                        
                        if submit:
                            if name and price >= 0:
                                if data.update_service(selected_service_id, name, description, price):                                        
                                    st.success("Service updated successfully!")
                                    st.rerun()
                                else:
                                    st.error("Failed to update service.")
                            else:
                                st.error("Please fill in all required fields.")
                    
                with st.expander("Delete Service"):
                        st.warning("Are you sure you want to delete this service? This action cannot be undone.")
                        if st.button("Delete Service"):
                            success, message = data.delete_service(selected_service_id)
                            if success:
                                st.success(message)
                                st.rerun()
                            else:
                                st.error(message)
    else:
            st.info("No service found.")
        


# Run the web
if __name__ == "__main__":
    web()
