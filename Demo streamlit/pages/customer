import streamlit as st
import pandas as pd
import data

def web():
    st.title("Customer Management")
    
    # Check authentication
    if not st.session_state.get('authenticated', False):
        st.warning("Please login to access this page.")
        st.stop()
    
    # Create tabs for different actions
    tab1, tab2 = st.tabs(["View Customers", "Add Customer"])
    
    with tab1:
        st.header("Customers List")
        
        # Search functionality
        search = st.text_input("Search by name, phone, or email")
        
        # Display customers in a table
        if st.session_state.customers:
            df = pd.DataFrame(st.session_state.customers)
            
            # Apply search filter if specified
            if search:
                search = search.lower()
                df = df[
                    df['name'].str.lower().str.contains(search) | 
                    df['phone'].str.lower().str.contains(search) | 
                    df['email'].str.lower().str.contains(search)
                ]
            
            # Reorder and rename columns for display
            display_df = df[['id', 'name', 'phone', 'email', 'registration_date']]
            display_df.columns = ['ID', 'Name', 'Phone', 'Email', 'Registration Date']
            st.dataframe(display_df, use_container_width=True)
            
            # Select a customer to edit or delete
            selected_customer_id = st.selectbox(
                "Select a customer to edit or delete",
                options=[customer["id"] for customer in st.session_state.customers],
                format_func=lambda x: next((c["name"] for c in st.session_state.customers if c["id"] == x), x)
            )
            
            if selected_customer_id:
                customer = next((c for c in st.session_state.customers if c["id"] == selected_customer_id), None)
                if customer:
                    with st.expander("Customer Details"):
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write("**Name:**", customer["name"])
                            st.write("**Phone:**", customer["phone"])
                        
                        with col2:
                            st.write("**Email:**", customer["email"])
                            st.write("**Registration Date:**", customer["registration_date"])
                        
                        st.write("**Address:**", customer.get("address", ""))
                        
                        # Show customer's booking history
                        customer_bookings = [b for b in st.session_state.bookings if b["customer_id"] == selected_customer_id]
                        if customer_bookings:
                            st.subheader("Booking History")
                            history_df = pd.DataFrame(customer_bookings)
                            history_df["field_name"] = history_df["field_id"].apply(
                                lambda x: next((f["name"] for f in st.session_state.fields if f["id"] == x), "Unknown")
                            )
                            display_history = history_df[["date", "start_time", "end_time", "field_name", "total_cost", "status"]]
                            display_history.columns = ["Date", "Start Time", "End Time", "Field", "Total Cost", "Status"]
                            st.dataframe(display_history, use_container_width=True)
                        else:
                            st.info("No booking history found for this customer.")
                    
                    with st.expander("Edit Customer"):
                        with st.form("edit_customer_form"):
                            name = st.text_input("Name", value=customer["name"])
                            phone = st.text_input("Phone", value=customer["phone"])
                            email = st.text_input("Email", value=customer["email"])
                            address = st.text_area("Address", value=customer.get("address", ""))
                            
                            col1, col2 = st.columns(2)
                            with col1:
                                submit = st.form_submit_button("Update Customer")
                            
                            if submit:
                                if name and phone and email:
                                    if data.update_customer(selected_customer_id, name, phone, email, address):
                                        st.success("Customer updated successfully!")
                                        st.rerun()
                                    else:
                                        st.error("Failed to update customer.")
                                else:
                                    st.error("Please fill in all required fields.")
                    
                    with st.expander("Delete Customer"):
                        st.warning("Are you sure you want to delete this customer? This action cannot be undone.")
                        if st.button("Delete Customer"):
                            success, message = data.delete_customer(selected_customer_id)
                            if success:
                                st.success(message)
                                st.rerun()
                            else:
                                st.error(message)
        else:
            st.info("No customers available. Please add a customer.")
    
    with tab2:
        st.header("Add New Customer")
        
        with st.form("add_customer_form"):
            name = st.text_input("Name")
            phone = st.text_input("Phone")
            email = st.text_input("Email")
            address = st.text_area("Address")
            
            submitted = st.form_submit_button("Add Customer")
            
            if submitted:
                if name and phone and email:
                    customer_id = data.add_customer(name, phone, email, address)
                    if customer_id:
                        st.success(f"Customer '{name}' added successfully!")
                        st.rerun()
                    else:
                        st.error("Failed to add customer.")
                else:
                    st.error("Please fill in all required fields.")

# Run the web
if __name__ == "__main__":
    web()

