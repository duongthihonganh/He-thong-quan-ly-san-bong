import streamlit as st
import pandas as pd
import datetime
import data

def web():
    st.title("Booking Management")
    
    # Check authentication
    if not st.session_state.get('authenticated', False):
        st.warning("Please login to access this page.")
        st.stop()
    
    # Create tabs for different actions
    tab1, tab2 = st.tabs(["View Bookings", "Create Booking"])
    
    with tab1:
        st.header("Bookings List")
        
        # Filter options
        col1, col2, col3 = st.columns(3)
        
        with col1:
            filter_date = st.date_input("Filter by Date", value=None)
        
        with col2:
            filter_field = st.selectbox(
                "Filter by Field",
                options=["All"] + [field["id"] for field in st.session_state.fields],
                format_func=lambda x: "All" if x == "All" else next((f["name"] for f in st.session_state.fields if f["id"] == x), x)
            )
        
        with col3:
            filter_status = st.selectbox(
                "Filter by Status",
                options=["All", "Confirmed", "Pending", "Cancelled"]
            )
        
        # Apply filters
        filtered_bookings = st.session_state.bookings
        
        if filter_date:
            filtered_bookings = [b for b in filtered_bookings if pd.to_datetime(b["date"]).date() == filter_date]
        
        if filter_field != "All":
            filtered_bookings = [b for b in filtered_bookings if b["field_id"] == filter_field]
        
        if filter_status != "All":
            filtered_bookings = [b for b in filtered_bookings if b["status"] == filter_status]
        
        # Display bookings in a table
        if filtered_bookings:
            # Convert to DataFrame for display
            df = pd.DataFrame(filtered_bookings)
            
            # Add customer and field names
            df["customer_name"] = df["customer_id"].apply(
                lambda x: next((c["name"] for c in st.session_state.customers if c["id"] == x), "Unknown")
            )
            
            df["field_name"] = df["field_id"].apply(
                lambda x: next((f["name"] for f in st.session_state.fields if f["id"] == x), "Unknown")
            )
            
            # Select columns to display
            display_df = df[["id", "date", "start_time", "end_time", "customer_name", "field_name", "total_cost", "status"]]
            display_df.columns = ["ID", "Date", "Start Time", "End Time", "Customer", "Field", "Total Cost", "Status"]
            
            st.dataframe(display_df, use_container_width=True)
            
            # Select a booking to edit or delete
            selected_booking_id = st.selectbox(
                "Select a booking to view, edit or cancel",
                options=[booking["id"] for booking in filtered_bookings],
                format_func=lambda x: next((b['date'] + ' - ' + next((c['name'] for c in st.session_state.customers if c['id'] == b['customer_id']), 'Unknown')) for b in filtered_bookings if b['id'] == x)
            )
            
            if selected_booking_id:
                booking = next((b for b in st.session_state.bookings if b["id"] == selected_booking_id), None)
                if booking:
                    with st.expander("Booking Details"):
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write("**Date:**", booking["date"])
                            st.write("**Time:**", f"{booking['start_time']} to {booking['end_time']}")
                            st.write("**Field:**", next((f["name"] for f in st.session_state.fields if f["id"] == booking["field_id"]), "Unknown"))
                        
                        with col2:
                            st.write("**Customer:**", next((c["name"] for c in st.session_state.customers if c["id"] == booking["customer_id"]), "Unknown"))
                            st.write("**Status:**", booking["status"])
                            st.write("**Total Cost:**", data.format_vnd(booking['total_cost']))
                        
                        if booking.get("services"):
                            services_list = []
                            for service_id in booking["services"]:
                                service = next((s for s in st.session_state.services if s["id"] == service_id), None)
                                if service:
                                    services_list.append(f"{service['name']} ({data.format_vnd(service['price'])})")
                            
                            if services_list:
                                st.write("**Additional Services:**")
                                for service_name in services_list:
                                    st.write(f"- {service_name}")
                    
                    with st.expander("Edit Booking"):
                        with st.form("edit_booking_form"):
                            field_id = st.selectbox(
                                "Field",
                                options=[field["id"] for field in st.session_state.fields],
                                format_func=lambda x: next((f["name"] for f in st.session_state.fields if f["id"] == x), x),
                                index=next((i for i, f in enumerate(st.session_state.fields) if f["id"] == booking["field_id"]), 0)
                            )
                            
                            customer_id = st.selectbox(
                                "Customer",
                                options=[customer["id"] for customer in st.session_state.customers],
                                format_func=lambda x: next((c["name"] for c in st.session_state.customers if c["id"] == x), x),
                                index=next((i for i, c in enumerate(st.session_state.customers) if c["id"] == booking["customer_id"]), 0)
                            )
                            
                            date = st.date_input("Date", value=pd.to_datetime(booking["date"]))
                            
                            col1, col2 = st.columns(2)
                            with col1:
                                start_time = st.time_input("Start Time", value=datetime.datetime.strptime(booking["start_time"], "%H:%M").time())
                            with col2:
                                end_time = st.time_input("End Time", value=datetime.datetime.strptime(booking["end_time"], "%H:%M").time())
                            
                            services = st.multiselect(
                                "Additional Services",
                                options=[service["id"] for service in st.session_state.services],
                                default=booking.get("services", []),
                                format_func=lambda x: f"{next((s['name'] for s in st.session_state.services if s['id'] == x), x)} - {data.format_vnd(next((s['price'] for s in st.session_state.services if s['id'] == x), 0))}"
                            )
                            
                            status = st.selectbox(
                                "Status",
                                options=["Confirmed", "Pending", "Cancelled"],
                                index=["Confirmed", "Pending", "Cancelled"].index(booking["status"]) if booking["status"] in ["Confirmed", "Pending", "Cancelled"] else 0
                            )
                            
                            submit = st.form_submit_button("Update Booking")
                            
                            if submit:
                                # Convert time to string format
                                start_time_str = start_time.strftime("%H:%M")
                                end_time_str = end_time.strftime("%H:%M")
                                date_str = date.strftime("%Y-%m-%d")
                                
                                # Check if the selected time slot is available
                                if start_time >= end_time:
                                    st.error("End time must be after start time.")
                                else:
                                    # Check availability (excluding the current booking)
                                    is_available = data.check_field_availability(
                                        field_id, date_str, start_time_str, end_time_str, exclude_booking_id=selected_booking_id
                                    )
                                    
                                    if is_available:
                                        success, message = data.update_booking(
                                            selected_booking_id, field_id, customer_id, date_str, 
                                            start_time_str, end_time_str, services, status
                                        )
                                        
                                        if success:
                                            st.success(message)
                                            st.rerun()
                                        else:
                                            st.error(message)
                                    else:
                                        st.error("The selected time slot is not available. Please choose another time.")
                    
                    with st.expander("Cancel Booking"):
                        st.warning("Are you sure you want to cancel this booking?")
                        
                        if st.button("Cancel Booking"):
                            # Update booking status to cancelled
                            success, message = data.update_booking(
                                selected_booking_id, booking["field_id"], booking["customer_id"], 
                                booking["date"], booking["start_time"], booking["end_time"],
                                booking.get("services", []), "Cancelled"
                            )
                            
                            if success:
                                st.success("Booking cancelled successfully!")
                                st.rerun()
                            else:
                                st.error(message)
        else:
            st.info("No bookings found.")
    # Add new booking
    with st.expander("Create New Booking"):
        with st.form("add_booking_form"):
                field_id = st.selectbox(
                    "Field",
                    options=[field["id"] for field in st.session_state.fields],
                    format_func=lambda x: f"{next((f['name'] for f in st.session_state.fields if f['id'] == x), x)} - {data.format_vnd(next((f['hourly_rate'] for f in st.session_state.fields if f['id'] == x), 0))}/giờ"
                )
                
                customer_id = st.selectbox(
                    "Customer",
                    options=[customer["id"] for customer in st.session_state.customers],
                    format_func=lambda x: next((c["name"] for c in st.session_state.customers if c["id"] == x), x)
                )
                
                date = st.date_input("Date", min_value=datetime.date.today())
                
                col1, col2 = st.columns(2)
                with col1:
                    start_time = st.time_input("Start Time", value=datetime.time(8, 0))
                with col2:
                    end_time = st.time_input("End Time", value=datetime.time(9, 0))
                
                services = st.multiselect(
                    "Additional Services",
                    options=[service["id"] for service in st.session_state.services],
                    format_func=lambda x: f"{next((s['name'] for s in st.session_state.services if s['id'] == x), x)} - {data.format_vnd(next((s['price'] for s in st.session_state.services if s['id'] == x), 0))}"
                )
                
                status = st.selectbox("Status", options=["Confirmed", "Pending"])
                
                submit = st.form_submit_button("Create Booking")
                
                if submit:
                    # Convert time to string format
                    start_time_str = start_time.strftime("%H:%M")
                    end_time_str = end_time.strftime("%H:%M")
                    date_str = date.strftime("%Y-%m-%d")
                    
                    # Validate inputs
                    if start_time >= end_time:
                        st.error("End time must be after start time.")
                    else:
                        # Check availability
                        is_available = data.check_field_availability(
                            field_id, date_str, start_time_str, end_time_str
                        )
                        
                        if is_available:
                            booking_id, message = data.add_booking(
                                field_id, customer_id, date_str, start_time_str, end_time_str, services, status
                            )
                            
                            if booking_id:
                                st.success("Booking created successfully!")
                                st.rerun()
                            else:
                                st.error(message)
                        else:
                            st.error("The selected time slot is not available. Please choose another time.")

if __name__ == "__main__":
    web()
