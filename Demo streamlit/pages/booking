
import streamlit as st
import pandas as pd
import datetime
import data

def web():
    st.title("Booking Management")
    
    # Check authentication
    if not st.session_state.get('authenticated', False):
        st.warning("Please login to access this page.")
        st.stop()
    
    # Create a single tab
    st.header("Bookings List")
    
    # Filter options
    col1, col2, col3 = st.columns(3)
    
    with col1:
        filter_date = st.date_input("Filter by Date", value=None)
    
    with col2:
        filter_field = st.selectbox(
            "Filter by Field",
            options=["All"] + [field["id"] for field in st.session_state.fields],
            format_func=lambda x: "All" if x == "All" else next((f["name"] for f in st.session_state.fields if f["id"] == x), x)
        )
    
    with col3:
        filter_status = st.selectbox(
            "Filter by Status",
            options=["All", "Confirmed", "Pending", "Cancelled"]
        )
    
    # Apply filters
    filtered_bookings = st.session_state.bookings
    
    if filter_date:
        filtered_bookings = [b for b in filtered_bookings if pd.to_datetime(b["date"]).date() == filter_date]
    
    if filter_field != "All":
        filtered_bookings = [b for b in filtered_bookings if b["field_id"] == filter_field]
    
    if filter_status != "All":
        filtered_bookings = [b for b in filtered_bookings if b["status"] == filter_status]
    
    # Display bookings in a table
    if filtered_bookings:
        # Convert to DataFrame for display
        df = pd.DataFrame(filtered_bookings)
        
        # Add customer and field names
        df["customer_name"] = df["customer_id"].apply(
            lambda x: next((c["name"] for c in st.session_state.customers if c["id"] == x), "Unknown")
        )
        
        df["field_name"] = df["field_id"].apply(
            lambda x: next((f["name"] for f in st.session_state.fields if f["id"] == x), "Unknown")
        )
        
        # Select columns to display
        display_df = df[["id", "date", "start_time", "end_time", "customer_name", "field_name", "total_cost", "status"]]
        display_df.columns = ["ID", "Date", "Start Time", "End Time", "Customer", "Field", "Total Cost", "Status"]
        
        st.dataframe(display_df, use_container_width=True)
        
        # Select a booking to edit or delete
        selected_booking_id = st.selectbox(
            "Select a booking to view, edit or cancel",
            options=[booking["id"] for booking in filtered_bookings],
            format_func=lambda x: next((b['date'] + ' - ' + next((c['name'] for c in st.session_state.customers if c['id'] == b['customer_id']), 'Unknown')) for b in filtered_bookings if b['id'] == x)
        )
        
        if selected_booking_id:
            booking = next((b for b in st.session_state.bookings if b["id"] == selected_booking_id), None)
            if booking:
                with st.expander("Booking Details"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write("**Date:**", booking["date"])
                        st.write("**Time:**", f"{booking['start_time']} to {booking['end_time']}")
                        st.write("**Field:**", next((f["name"] for f in st.session_state.fields if f["id"] == booking["field_id"]), "Unknown"))
                    
                    with col2:
                        st.write("**Customer:**", next((c["name"] for c in st.session_state.customers if c["id"] == booking["customer_id"]), "Unknown"))
                        st.write("**Status:**", booking["status"])
                        st.write("**Total Cost:**", data.format_vnd(booking['total_cost']))
                    
                    if booking.get("services"):
                        services_list = []
                        for service_id in booking["services"]:
                            service = next((s for s in st.session_state.services if s["id"] == service_id), None)
                            if service:
                                services_list.append(f"{service['name']} ({data.format_vnd(service['price'])})")
                        
                        if services_list:
                            st.write("**Additional Services:**")
                            for service_name in services_list:
                                st.write(f"- {service_name}")
                
                with st.expander("Edit Booking"):
                    # Edit booking form (same as before)
                    pass
                
                with st.expander("Cancel Booking"):
                    # Cancel booking logic (same as before)
                    pass
    else:
        st.info("No bookings found.")
    
    # Button to create a new booking
    if st.button("Create New Booking"):
        st.header("Create New Booking")
        
        # Check if there are fields 
        if not st.session_state.fields:
            st.warning("No fields available. Please add a field first.")
        else:
            with st.form("create_booking_form"):
                field_id = st.selectbox(
                    "Field",
                    options=[field["id"] for field in st.session_state.fields],
                    format_func=lambda x: f"{next((f['name'] for f in st.session_state.fields if f['id'] == x), x)} - {data.format_vnd(next((f['hourly_rate'] for f in st.session_state.fields if f['id'] == x), 0))}/gi·ªù"
                )
                
                customer_id = st.selectbox(
                    "Customer",
                    options=[customer["id"] for customer in st.session_state.customers],
                    format_func=lambda x: next((c["name"] for c in st.session_state.customers if c["id"] == x), x)
                )
                
                date = st.date_input("Date", min_value=datetime.date.today())
                
                col1, col2 = st.columns(2)
                with col1:
                    start_time = st.time_input("Start Time", value=datetime.time(8, 0))
                with col2:
                    end_time = st.time_input("End Time", value=datetime.time(9, 0))
                
                services = st.multiselect(
                    "Additional Services",
                    options=[service["id"] for service in st.session_state.services],
                    format_func=lambda x: f"{next((s['name'] for s in st.session_state.services if s['id'] == x), x)} - {data.format_vnd(next((s['price'] for s in st.session_state.services if s['id'] == x), 0))}"
                )
                
                status = st.selectbox("Status", options=["Confirmed", "Pending"])
                
                submit = st.form_submit_button("Create Booking")
                
                if submit:
                    # Create booking logic (same as before)
                    pass

# Run the web
if __name__ == "__main__":
    web()
